// Firestore Security Rules for ReceiptGold

rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        // Transaction Candidates collection - users can only access their own candidates
        match /transactionCandidates/{candidateId} {
            allow read: if isAuthenticated() && (resource == null || request.auth.uid == resource.data.userId);
            allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
            allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
        }

        // Generated Receipts collection - users can only access their own generated receipts
        match /generatedReceipts/{receiptId} {
            allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
            allow list: if isAuthenticated() && request.auth.uid == resource.data.userId;            allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
            allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
        }

        // Candidate Status collection - users can only access their own candidate statuses
        match /candidateStatus/{statusId} {
            allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
            allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
            allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
        }

        // Bank Connections collection - users can only access their own bank connections
        match /bankConnections/{connectionId} {
            allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
            allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
            allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
        }

        // Plaid Items collection - users can only access their own plaid items
        match /plaid_items/{itemId} {
            allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
            allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
            allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
        }

        // Merchant Categories collection - shared data for categorizing merchants
        match /merchantCategories/{merchantId} {
            // Anyone authenticated can read merchant categories
            allow read: if isAuthenticated();

            // Anyone authenticated can create/update merchant categories
            // This allows crowdsourced categorization from all users
            allow create, update: if isAuthenticated() &&
            // Validate required fields
            request.resource.data.keys().hasAll(['merchantName', 'category', 'confidence']) &&
            // Validate data types and sizes
            request.resource.data.merchantName is string &&
            request.resource.data.merchantName.size() <= 100 &&
            request.resource.data.category is string &&
            request.resource.data.category.size() <= 50 &&
            request.resource.data.confidence is number &&
            // Validate confidence is between 0 and 1
            request.resource.data.confidence >= 0 && request.resource.data.confidence <= 1;

            // Only allow deletion by admins or Cloud Functions
            allow delete: if isAdmin();
        }

        // Helper functions
        function isAuthenticated() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return isAuthenticated() && request.auth.uid == userId;
        }

        function isValidUser() {
            return isAuthenticated() && request.auth.uid != null;
        }

        function hasValidEmail() {
            return isAuthenticated() && request.auth.token.email_verified == true;
        }

        // Users collection - users can only access their own data
        match /users/{userId} {
            allow read, write: if isOwner(userId);

            // Allow creation during signup
            allow create: if isAuthenticated() && 
            request.auth.uid == userId &&
            hasValidEmail();

            // Allow users to delete their own account
            allow delete: if isOwner(userId);
        }

        // Subscriptions collection - read only for users, write only via Cloud Functions
        match /subscriptions/{userId} {
            allow read: if isOwner(userId);

            // Allow users to initialize trial from free tier
            allow update: if isOwner(userId) && 
            // Only allow converting from free to trial
            resource.data.currentTier == "free" &&
            request.resource.data.currentTier == "trial" &&
            // Ensure trial data is being added
            request.resource.data.keys().hasAll(['trial']) &&
            // Prevent users from upgrading to paid tiers
            request.resource.data.currentTier in ["free", "trial"];

            // Only Cloud Functions can write other subscription changes
            // This prevents users from upgrading themselves to paid tiers
            allow write: if false;

            // Allow creation during user initialization and trial setup
            allow create: if isOwner(userId);

            // Allow users to delete their subscription during account deletion
            allow delete: if isOwner(userId);
        }

        // Receipts collection - users can access their own receipts or receipts they created as team members
        match /receipts/{receiptId} {
            allow read, list: if isAuthenticated() && (
                request.auth.uid == resource.data.userId ||
                // Allow team members to read receipts they created
                (resource.data.teamAttribution != null && 
                 resource.data.teamAttribution.createdByUserId == request.auth.uid)
            );

            allow create: if isAuthenticated() && 
            // Account holders can create receipts for themselves
            (request.auth.uid == request.resource.data.userId ||
             // Team members can create receipts (stored under account holder's userId)
             (request.resource.data.teamAttribution != null && 
              request.resource.data.teamAttribution.createdByUserId == request.auth.uid)) &&
            // Validate userId is present, is a string, and has reasonable length
            request.resource.data.keys().hasAll(['userId']) &&
            request.resource.data.userId is string &&
            request.resource.data.userId.size() <= 128;

            allow update: if isAuthenticated() && (
                // Account holders can update their receipts
                request.auth.uid == resource.data.userId ||
                // Team members can only update receipts they created
                (resource.data.teamAttribution != null && 
                 resource.data.teamAttribution.createdByUserId == request.auth.uid)
            ) &&
            // Prevent changing userId (must remain the same)
            request.resource.data.userId == resource.data.userId;

            allow delete: if isAuthenticated() && (
                // Account holders can delete their receipts
                request.auth.uid == resource.data.userId ||
                // Team members can only delete receipts they created
                (resource.data.teamAttribution != null && 
                 resource.data.teamAttribution.createdByUserId == request.auth.uid)
            );
        }

        // Businesses collection - users can only access their own businesses
        match /businesses/{businessId} {
            allow read, write: if isAuthenticated() && 
            request.auth.uid == resource.data.userId;

            allow create: if isAuthenticated() && 
            request.auth.uid == request.resource.data.userId &&
            // Validate required fields
            request.resource.data.keys().hasAll(['userId', 'name']) &&
            // Validate business name length
            request.resource.data.name is string &&
            request.resource.data.name.size() > 0 &&
            request.resource.data.name.size() <= 100;

            allow update: if isAuthenticated() && 
            request.auth.uid == resource.data.userId &&
            // Prevent changing userId
            request.resource.data.userId == resource.data.userId;

            allow delete: if isAuthenticated() && 
            request.auth.uid == resource.data.userId;
        }

        // Reports collection - users can only access their own reports
        match /reports/{reportId} {
            allow read: if isAuthenticated() && 
            request.auth.uid == resource.data.userId;

            allow create: if isAuthenticated() && 
            request.auth.uid == request.resource.data.userId &&
            // Validate required fields and sizes
            request.resource.data.keys().hasAll(['userId', 'type', 'title']) &&
            request.resource.data.type is string &&
            request.resource.data.type.size() <= 50 &&
            request.resource.data.title is string &&
            request.resource.data.title.size() <= 200;

            allow update: if isAuthenticated() && 
            request.auth.uid == resource.data.userId &&
            // Prevent changing userId
            request.resource.data.userId == resource.data.userId;

            allow delete: if isAuthenticated() && 
            request.auth.uid == resource.data.userId;
        }

        // Usage collection - read only for users, write only via Cloud Functions
        match /usage/{usageId} {
            // Allow users to read their own usage data
            allow read: if isAuthenticated() && 
            usageId.startsWith(request.auth.uid + '_');

            // Only Cloud Functions can write usage data
            allow write: if false;

            // Allow creation during user initialization
            allow create: if isAuthenticated() && 
            usageId.startsWith(request.auth.uid + '_') &&
            request.resource.data.userId == request.auth.uid;

            // Allow users to delete their usage data during account deletion
            allow delete: if isAuthenticated() && 
            usageId.startsWith(request.auth.uid + '_');
        }

        // Categories collection - public read access, admin write only
        match /categories/{categoryId} {
            // Anyone can read categories (for autocomplete, etc.)
            allow read: if true;

            // Only admins can write categories
            // This would need to be updated with admin logic or use Cloud Functions
            allow write: if false;
        }

        // Custom Categories collection - users can only access their own custom categories
        match /customCategories/{categoryId} {
            allow read: if isAuthenticated() && 
            request.auth.uid == resource.data.userId;

            allow create: if isAuthenticated() && 
            request.auth.uid == request.resource.data.userId &&
            // Validate required fields
            request.resource.data.keys().hasAll(['userId', 'name', 'icon']) &&
            // Validate data types and sizes
            request.resource.data.name is string &&
            request.resource.data.icon is string &&
            request.resource.data.icon.size() <= 50 &&
            // Validate name length
            request.resource.data.name.size() >= 2 && 
            request.resource.data.name.size() <= 30;

            allow update: if isAuthenticated() && 
            request.auth.uid == resource.data.userId &&
            // Prevent changing userId
            request.resource.data.userId == resource.data.userId;

            allow delete: if isAuthenticated() && 
            request.auth.uid == resource.data.userId;
        }

        // Budgets collection - users can only access their own budgets
        match /budgets/{budgetId} {
            allow read: if isAuthenticated() && 
            request.auth.uid == resource.data.userId;

            allow create: if isAuthenticated() && 
            request.auth.uid == request.resource.data.userId &&
            // Validate required fields and sizes
            request.resource.data.keys().hasAll(['userId', 'name', 'amount']) &&
            request.resource.data.name is string &&
            request.resource.data.name.size() > 0 &&
            request.resource.data.name.size() <= 100;

            allow update: if isAuthenticated() && 
            request.auth.uid == resource.data.userId &&
            // Prevent changing userId
            request.resource.data.userId == resource.data.userId;

            allow delete: if isAuthenticated() && 
            request.auth.uid == resource.data.userId;
        }

        // Admin functions (if needed)
        // You can extend this with custom claims for admin users
        function isAdmin() {
            return isAuthenticated() && 
            request.auth.token.admin == true;
        }

        // Admin-only collections (if you add them later)
        match /admin/{document=**} {
            allow read, write: if isAdmin();
        }

        // Analytics collection (optional - for tracking app usage)
        match /analytics/{document=**} {
            // Only allow reading/writing via Cloud Functions
            allow read, write: if false;
        }

        // User notifications - users can read/write their own notifications
        match /user_notifications/{notificationId} {
            allow read, write: if isAuthenticated() && 
            (request.auth.uid == resource.data.userId || 
             request.auth.uid == request.resource.data.userId);
        }

        // Connection notifications - read-only for users, write via Cloud Functions
        match /connection_notifications/{notificationId} {
            allow read: if isAuthenticated() && 
            request.auth.uid == resource.data.userId;
            allow write: if false; // Only Cloud Functions can write
        }

        // Audit logs (optional - for compliance)
        match /audit_logs/{logId} {
            // Users can read their own audit logs
            allow read: if isAuthenticated() && 
            resource.data.userId == request.auth.uid;

            // Only Cloud Functions can write audit logs
            allow write: if false;
        }

        // Team Invitations collection - account holders can manage their invitations
        match /teamInvitations/{invitationId} {
            // Account holders can read and list their own invitations
            allow read, list: if isAuthenticated() && 
            request.auth.uid == resource.data.accountHolderId;

            // Account holders can create invitations
            allow create: if isAuthenticated() && 
            request.auth.uid == request.resource.data.accountHolderId &&
            // Validate required fields
            request.resource.data.keys().hasAll(['accountHolderId', 'inviteEmail', 'status', 'token', 'expiresAt', 'createdAt', 'role']) &&
            // Validate field types and sizes
            request.resource.data.inviteEmail is string &&
            request.resource.data.inviteEmail.size() <= 254 &&
            request.resource.data.status == 'pending' &&
            request.resource.data.token is string &&
            request.resource.data.role in ['teammate', 'admin'];

            // Account holders can update (revoke) their invitations
            allow update: if isAuthenticated() && 
            request.auth.uid == resource.data.accountHolderId &&
            // Prevent changing core fields, only allow status updates
            request.resource.data.accountHolderId == resource.data.accountHolderId &&
            request.resource.data.inviteEmail == resource.data.inviteEmail &&
            request.resource.data.token == resource.data.token;

            // Account holders can delete their invitations
            allow delete: if isAuthenticated() && 
            request.auth.uid == resource.data.accountHolderId;

            // Allow invited users to read invitations by token (for accepting invitations)
            allow read, list: if isAuthenticated() && 
            resource.data.inviteEmail.lower() == request.auth.token.email.lower() &&
            resource.data.status == 'pending';
        }

        // Team Members collection - account holders and team members can read, limited write access
        match /teamMembers/{memberId} {
            // Account holders can read and list all their team members
            // Team members can read their own membership record
            allow read, list: if isAuthenticated() && (
                request.auth.uid == resource.data.accountHolderId ||
                request.auth.uid == resource.data.userId
            );

            // Only allow creation during invitation acceptance (Cloud Functions preferred)
            allow create: if isAuthenticated() && 
            request.auth.uid == request.resource.data.userId &&
            // Validate required fields
            request.resource.data.keys().hasAll(['accountHolderId', 'userId', 'email', 'role', 'status', 'joinedAt']) &&
            // Validate field types
            request.resource.data.status == 'active' &&
            request.resource.data.role in ['teammate', 'admin'];

            // Account holders can update team member status (suspend/activate)
            // Team members can update their own display name and last active time
            allow update: if isAuthenticated() && (
                (request.auth.uid == resource.data.accountHolderId &&
                 // Account holders can only change status and permissions
                 request.resource.data.userId == resource.data.userId &&
                 request.resource.data.accountHolderId == resource.data.accountHolderId &&
                 request.resource.data.email == resource.data.email) ||
                (request.auth.uid == resource.data.userId &&
                 // Team members can only update their display name and last active time
                 request.resource.data.userId == resource.data.userId &&
                 request.resource.data.accountHolderId == resource.data.accountHolderId &&
                 request.resource.data.email == resource.data.email &&
                 request.resource.data.role == resource.data.role &&
                 request.resource.data.status == resource.data.status)
            );

            // Account holders can delete (remove) team members
            allow delete: if isAuthenticated() && 
            request.auth.uid == resource.data.accountHolderId;
        }
    }
}