import { PlaidTransaction } from './PlaidService';
import { MerchantInfo, MerchantLogoService } from './MerchantLogoService';

export interface ReceiptData {
  transaction: PlaidTransaction;
  merchantInfo: MerchantInfo;
  receiptNumber: string;
  timestamp: Date;
  userInfo?: {
    name?: string;
    email?: string;
  };
}

export interface ReceiptTemplate {
  html: string;
  styles: string;
}

export class ReceiptTemplateService {
  private static instance: ReceiptTemplateService;
  private merchantService: MerchantLogoService;

  private constructor() {
    this.merchantService = MerchantLogoService.getInstance();
  }

  public static getInstance(): ReceiptTemplateService {
    if (!ReceiptTemplateService.instance) {
      ReceiptTemplateService.instance = new ReceiptTemplateService();
    }
    return ReceiptTemplateService.instance;
  }

  /**
   * Generate a receipt from transaction data
   */
  public async generateReceipt(
    transaction: PlaidTransaction,
    userInfo?: { name?: string; email?: string }
  ): Promise<ReceiptData> {
    console.log('ðŸ“„ Generating receipt for transaction:', transaction.transaction_id);

    // Get merchant information
    const merchantInfo = await this.merchantService.getMerchantInfo(transaction);

    // Generate receipt number
    const receiptNumber = this.generateReceiptNumber(transaction);

    return {
      transaction,
      merchantInfo,
      receiptNumber,
      timestamp: new Date(transaction.date),
      userInfo
    };
  }

  /**
   * Convert receipt data to HTML template
   */
  public generateHTML(receiptData: ReceiptData): ReceiptTemplate {
    const { transaction, merchantInfo, receiptNumber, timestamp } = receiptData;
    
    const html = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Receipt - ${merchantInfo.name}</title>
        </head>
        <body>
          <div class="receipt-container">
            <!-- Header -->
            <div class="receipt-header">
              <div class="merchant-logo">
                ${this.renderMerchantLogo(merchantInfo)}
              </div>
              <h1 class="merchant-name">${merchantInfo.name}</h1>
              <p class="merchant-category">${merchantInfo.category}</p>
            </div>

            <!-- Receipt Info -->
            <div class="receipt-info">
              <div class="receipt-number">
                <span class="label">Receipt #:</span>
                <span class="value">${receiptNumber}</span>
              </div>
              <div class="receipt-date">
                <span class="label">Date:</span>
                <span class="value">${this.formatDate(timestamp)}</span>
              </div>
            </div>

            <!-- Transaction Details -->
            <div class="transaction-details">
              <h2>Transaction Details</h2>
              
              <div class="transaction-row">
                <span class="description">${transaction.name}</span>
                <span class="amount">${this.formatAmount(transaction.amount)}</span>
              </div>
              
              ${transaction.category ? `
                <div class="category-info">
                  <span class="label">Category:</span>
                  <span class="value">${transaction.category.join(' > ')}</span>
                </div>
              ` : ''}
              
              ${transaction.location ? `
                <div class="location-info">
                  <span class="label">Location:</span>
                  <span class="value">
                    ${transaction.location.address ? transaction.location.address + ', ' : ''}
                    ${transaction.location.city ? transaction.location.city + ', ' : ''}
                    ${transaction.location.region ? transaction.location.region + ' ' : ''}
                    ${transaction.location.postal_code || ''}
                  </span>
                </div>
              ` : ''}
            </div>

            <!-- Total -->
            <div class="receipt-total">
              <div class="total-row">
                <span class="total-label">Total</span>
                <span class="total-amount">${this.formatAmount(transaction.amount)}</span>
              </div>
            </div>

            <!-- Footer -->
            <div class="receipt-footer">
              <p class="thank-you">Thank you for your business!</p>
              <p class="app-branding">Generated by ReceiptGold</p>
              <div class="transaction-id">
                Transaction ID: ${transaction.transaction_id}
              </div>
            </div>
          </div>
        </body>
      </html>
    `;

    const styles = this.getReceiptStyles();

    return { html, styles };
  }

  /**
   * Render merchant logo based on source
   */
  private renderMerchantLogo(merchantInfo: MerchantInfo): string {
    if (merchantInfo.logoUrl && merchantInfo.source !== 'generic') {
      return `<img src="${merchantInfo.logoUrl}" alt="${merchantInfo.name} logo" class="logo-image" onerror="this.style.display='none'">`;
    } else if (merchantInfo.source === 'generic') {
      return `<div class="logo-emoji">${merchantInfo.logoUrl}</div>`;
    } else {
      // Fallback to first letter of merchant name
      const firstLetter = merchantInfo.name.charAt(0).toUpperCase();
      return `<div class="logo-fallback">${firstLetter}</div>`;
    }
  }

  /**
   * Generate unique receipt number
   */
  private generateReceiptNumber(transaction: PlaidTransaction): string {
    const date = new Date(transaction.date);
    const dateStr = date.toISOString().slice(0, 10).replace(/-/g, '');
    const transactionHash = transaction.transaction_id.slice(-6).toUpperCase();
    return `RG-${dateStr}-${transactionHash}`;
  }

  /**
   * Format date for receipt
   */
  private formatDate(date: Date): string {
    return date.toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  /**
   * Format amount for display
   */
  private formatAmount(amount: number): string {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(Math.abs(amount)); // Use abs() since Plaid amounts are negative for debits
  }

  /**
   * Get CSS styles for receipt
   */
  private getReceiptStyles(): string {
    return `
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: 'Helvetica Neue', Arial, sans-serif;
        background-color: #f5f5f5;
        padding: 20px;
        line-height: 1.4;
      }

      .receipt-container {
        max-width: 400px;
        margin: 0 auto;
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        padding: 32px 24px;
        border: 1px solid #e1e1e1;
      }

      .receipt-header {
        text-align: center;
        margin-bottom: 32px;
        padding-bottom: 20px;
        border-bottom: 1px solid #f0f0f0;
      }

      .merchant-logo {
        margin-bottom: 16px;
      }

      .logo-image {
        width: 64px;
        height: 64px;
        border-radius: 8px;
        object-fit: contain;
      }

      .logo-emoji {
        font-size: 48px;
        line-height: 1;
      }

      .logo-fallback {
        width: 64px;
        height: 64px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        font-weight: bold;
        margin: 0 auto;
      }

      .merchant-name {
        font-size: 24px;
        font-weight: 700;
        color: #1a1a1a;
        margin-bottom: 8px;
      }

      .merchant-category {
        color: #666;
        font-size: 14px;
        text-transform: uppercase;
        letter-spacing: 1px;
      }

      .receipt-info {
        display: flex;
        justify-content: space-between;
        margin-bottom: 32px;
        font-size: 14px;
      }

      .receipt-info > div {
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      .label {
        color: #666;
        margin-bottom: 4px;
        font-weight: 500;
      }

      .value {
        color: #1a1a1a;
        font-weight: 600;
      }

      .transaction-details {
        margin-bottom: 32px;
      }

      .transaction-details h2 {
        font-size: 18px;
        color: #1a1a1a;
        margin-bottom: 16px;
        font-weight: 600;
      }

      .transaction-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 16px 0;
        border-bottom: 1px solid #f0f0f0;
      }

      .description {
        flex: 1;
        font-size: 16px;
        color: #1a1a1a;
        font-weight: 500;
      }

      .amount {
        font-size: 16px;
        font-weight: 600;
        color: #1a1a1a;
      }

      .category-info,
      .location-info {
        display: flex;
        justify-content: space-between;
        margin-top: 12px;
        font-size: 14px;
      }

      .receipt-total {
        margin-bottom: 32px;
        padding: 20px 0;
        border-top: 2px solid #1a1a1a;
        border-bottom: 1px solid #f0f0f0;
      }

      .total-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      .total-label {
        font-size: 18px;
        font-weight: 700;
        color: #1a1a1a;
      }

      .total-amount {
        font-size: 24px;
        font-weight: 700;
        color: #1a1a1a;
      }

      .receipt-footer {
        text-align: center;
        color: #666;
      }

      .thank-you {
        font-size: 16px;
        font-weight: 600;
        margin-bottom: 8px;
        color: #1a1a1a;
      }

      .app-branding {
        font-size: 14px;
        margin-bottom: 16px;
        color: #667eea;
        font-weight: 500;
      }

      .transaction-id {
        font-size: 12px;
        font-family: 'Monaco', 'Menlo', monospace;
        color: #999;
        padding: 8px;
        background: #f8f8f8;
        border-radius: 4px;
        word-break: break-all;
      }

      @media print {
        body {
          background: white;
          padding: 0;
        }
        
        .receipt-container {
          box-shadow: none;
          border: none;
          margin: 0;
          padding: 20px;
        }
      }
    `;
  }
}
